{"version":3,"sources":["state/lang.ts","meta/routerMeta.ts","utils/propsToStyle.ts","utils/assignRouteArrayProps/assignRouteArrayProps.ts","utils/assignRouteArrayProps/index.ts","containers lazy /^/.*$/ groupOptions: {} namespace object","CommonRouter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Lang","messages","ko","en","langState","atom","key","default","KO","routerMeta","Home","path","Category","cssCasing","camelString","output","split","map","sChar","isUppercase","concat","toLowerCase","character","toUpperCase","propsToStyle","props","hasOwnProperty","casedKey","value","isNumberToPixel","includes","assignRouteProps","assignRouteArrayProps","propsArr","Array","isArray","prop","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","assignRouter","componentKey","containerName","Comp","lazy","CommonRouter","fallback","element","App","lang","useRecoilValue","locale","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.dc4dd533.chunk.js","sourcesContent":["import { atom } from \"recoil\";\r\n\r\nimport ko from \"locale/ko.json\";\r\nimport en from \"locale/en.json\";\r\n\r\nexport enum Lang {\r\n  KO = 'ko',\r\n  EN = 'en'\r\n}\r\n\r\nexport const messages: { [key in Lang]: any } = { ko, en };\r\n\r\nconst langState = atom<Lang>({\r\n  key: 'langState',\r\n  default: Lang.KO\r\n});\r\n\r\nexport default langState","import { RouteProps } from \"react-router-dom\"\r\n\r\ntype RouteMetaType = (string | Omit<RouteProps, 'component'>)\r\n\r\nexport type RouterMetaTypes = { [key: string] : RouteMetaType | RouteMetaType[] } \r\n\r\nconst routerMeta: RouterMetaTypes = {\r\n  Home: { path: '/' },\r\n  Category: ['/category'],\r\n}\r\n\r\nexport default routerMeta","import { CSSProperties } from \"styled-components\";\r\n\r\nexport const propsToStyle = (props: CSSProperties): string => {\r\n  if (!props || typeof props !== 'object') return \"\"\r\n  \r\n  let output = \"\";\r\n  for (let key in props) {\r\n    if (props.hasOwnProperty(key)) {\r\n      const casedKey = cssCasing(key);\r\n      const value = (props as any)[key];\r\n      const isNumberToPixel: boolean = typeof value === 'number' && ['width', 'height'].includes(casedKey);\r\n      output = output.concat(`${casedKey}:${isNumberToPixel ? value + 'px' : value} !important;`);\r\n    }\r\n  }\r\n  return output; \r\n}\r\n\r\nconst cssCasing = (camelString: string): string => {\r\n  let output = \"\"\r\n  let stringArr = camelString.split(\"\");\r\n\r\n  stringArr.map((sChar) => {\r\n    if (!isUppercase(sChar)) {\r\n      output = output.concat(sChar);\r\n    } else {\r\n      output = output.concat(`-${sChar.toLowerCase()}`);\r\n    }\r\n  })\r\n\r\n  return output;\r\n}\r\n\r\nconst isUppercase = (character: string): boolean => {\r\n  if (character === character.toUpperCase()) return true;\r\n  return false;\r\n}\r\n\r\nexport default propsToStyle","const assignRouteProps = (props: any) => typeof props === 'object' ? props : ({ path: props })\r\nconst assignRouteArrayProps = (propsArr: any[] | any) => Array.isArray(propsArr) ? propsArr.map(prop => assignRouteProps(prop)) : assignRouteProps(propsArr)\r\n\r\nexport default assignRouteArrayProps","import assignRouteArrayProps from './assignRouteArrayProps'\r\nexport default assignRouteArrayProps","var map = {\n\t\"./Category\": [\n\t\t30,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t4\n\t],\n\t\"./Category/\": [\n\t\t30,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t4\n\t],\n\t\"./Category/Category\": [\n\t\t42,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t6\n\t],\n\t\"./Category/Category.tsx\": [\n\t\t42,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t6\n\t],\n\t\"./Category/CategoryListStyles\": [\n\t\t40,\n\t\t1,\n\t\t8\n\t],\n\t\"./Category/CategoryListStyles.tsx\": [\n\t\t40,\n\t\t1,\n\t\t8\n\t],\n\t\"./Category/index\": [\n\t\t30,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t4\n\t],\n\t\"./Category/index.ts\": [\n\t\t30,\n\t\t0,\n\t\t1,\n\t\t2,\n\t\t4\n\t],\n\t\"./Home\": [\n\t\t31,\n\t\t0,\n\t\t3,\n\t\t5\n\t],\n\t\"./Home/\": [\n\t\t31,\n\t\t0,\n\t\t3,\n\t\t5\n\t],\n\t\"./Home/Home\": [\n\t\t43,\n\t\t0,\n\t\t3,\n\t\t7\n\t],\n\t\"./Home/Home.tsx\": [\n\t\t43,\n\t\t0,\n\t\t3,\n\t\t7\n\t],\n\t\"./Home/index\": [\n\t\t31,\n\t\t0,\n\t\t3,\n\t\t5\n\t],\n\t\"./Home/index.ts\": [\n\t\t31,\n\t\t0,\n\t\t3,\n\t\t5\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 54;\nmodule.exports = webpackAsyncContext;","import React, { Suspense, lazy, FunctionComponent } from 'react';\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport { routerMeta } from 'meta';\r\nimport { assignRouteArrayProps } from 'utils';\r\n\r\ninterface ICustomRotuerProps {\r\n}\r\n\r\nconst lazyImport = (containerName: string) => lazy(() => import(`containers/${containerName}`));\r\n\r\ninterface AssignRoute {\r\n  Comp: any,\r\n  propsArr: any | any[]\r\n}\r\n\r\nconst assignRouter: AssignRoute[] = Object.keys(routerMeta).map((componentKey: string) => {\r\n  const propsArr: any = assignRouteArrayProps(routerMeta[componentKey])\r\n  return {\r\n    Comp: lazyImport(componentKey),\r\n    propsArr\r\n  }\r\n})\r\n\r\nconst CommonRouter: FunctionComponent<ICustomRotuerProps> = (props) => {\r\n  return <Suspense fallback={<div>Loading...</div>}>\r\n    <Routes>\r\n      {assignRouter.map(({ Comp, propsArr }) => {\r\n        if (Array.isArray(propsArr)) {\r\n          return propsArr.map(props => {\r\n            return <Route key={props.path} element={<Comp />} {...props} />\r\n          })\r\n        } else {\r\n          return <Route key={propsArr.path} element={<Comp />} {...propsArr} />\r\n        }\r\n      })}\r\n    </Routes>\r\n  </Suspense>;\r\n};\r\n\r\nexport default CommonRouter;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport \"antd/dist/antd.less\";\r\nimport { IntlProvider } from \"react-intl\";\r\nimport CommonRouter from \"./CommonRouter\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\n\r\nimport {\r\n  useRecoilValue,\r\n} from \"recoil\";\r\nimport langState, { messages } from \"state/lang\";\r\n\r\nconst App: FunctionComponent<any> = () => {\r\n  const lang = useRecoilValue(langState);\r\n\r\n  return (\r\n    <IntlProvider locale={lang} messages={messages[lang]}>\r\n      <Router>\r\n        <CommonRouter />\r\n      </Router>\r\n    </IntlProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.less\";\r\nimport App from \"./App\";\r\n\r\nimport {\r\n  RecoilRoot\r\n} from \"recoil\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <App />\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}